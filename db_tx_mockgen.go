// Code generated by MockGen. DO NOT EDIT.
// Source: db_tx.go
//
// Generated by this command:
//
//	mockgen -source=db_tx.go -destination=db_tx_mockgen.go -package=wsqlx
//
// Package wsqlx is a generated GoMock package.
package wsqlx

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// DoTx mocks base method.
func (m *MockTx) DoTx(ctx context.Context, opt *sql.TxOptions, fn func(Rdbms) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTx", ctx, opt, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoTx indicates an expected call of DoTx.
func (mr *MockTxMockRecorder) DoTx(ctx, opt, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTx", reflect.TypeOf((*MockTx)(nil).DoTx), ctx, opt, fn)
}
