// Code generated by MockGen. DO NOT EDIT.
// Source: rdbms.go
//
// Generated by this command:
//
//	mockgen -source=rdbms.go -destination=rdbms_mockgen.go -package=wsqlx
//
// Package wsqlx is a generated GoMock package.
package wsqlx

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	squirrel "github.com/Masterminds/squirrel"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockRdbms is a mock of Rdbms interface.
type MockRdbms struct {
	ctrl     *gomock.Controller
	recorder *MockRdbmsMockRecorder
}

// MockRdbmsMockRecorder is the mock recorder for MockRdbms.
type MockRdbmsMockRecorder struct {
	mock *MockRdbms
}

// NewMockRdbms creates a new mock instance.
func NewMockRdbms(ctrl *gomock.Controller) *MockRdbms {
	mock := &MockRdbms{ctrl: ctrl}
	mock.recorder = &MockRdbmsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRdbms) EXPECT() *MockRdbmsMockRecorder {
	return m.recorder
}

// ExecSq mocks base method.
func (m *MockRdbms) ExecSq(ctx context.Context, query squirrel.Sqlizer) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSq", ctx, query)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSq indicates an expected call of ExecSq.
func (mr *MockRdbmsMockRecorder) ExecSq(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSq", reflect.TypeOf((*MockRdbms)(nil).ExecSq), ctx, query)
}

// QueryRowSq mocks base method.
func (m *MockRdbms) QueryRowSq(ctx context.Context, query squirrel.Sqlizer, scanType QueryRowScanType, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRowSq", ctx, query, scanType, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRowSq indicates an expected call of QueryRowSq.
func (mr *MockRdbmsMockRecorder) QueryRowSq(ctx, query, scanType, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowSq", reflect.TypeOf((*MockRdbms)(nil).QueryRowSq), ctx, query, scanType, dest)
}

// QuerySq mocks base method.
func (m *MockRdbms) QuerySq(ctx context.Context, query squirrel.Sqlizer, callback callbackRows) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySq", ctx, query, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuerySq indicates an expected call of QuerySq.
func (mr *MockRdbmsMockRecorder) QuerySq(ctx, query, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySq", reflect.TypeOf((*MockRdbms)(nil).QuerySq), ctx, query, callback)
}

// QuerySqPagination mocks base method.
func (m *MockRdbms) QuerySqPagination(ctx context.Context, countQuery, query squirrel.SelectBuilder, pagination PaginationInput, callback callbackRows) (PaginationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySqPagination", ctx, countQuery, query, pagination, callback)
	ret0, _ := ret[0].(PaginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySqPagination indicates an expected call of QuerySqPagination.
func (mr *MockRdbmsMockRecorder) QuerySqPagination(ctx, countQuery, query, pagination, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySqPagination", reflect.TypeOf((*MockRdbms)(nil).QuerySqPagination), ctx, countQuery, query, pagination, callback)
}

// MockWriterCommand is a mock of WriterCommand interface.
type MockWriterCommand struct {
	ctrl     *gomock.Controller
	recorder *MockWriterCommandMockRecorder
}

// MockWriterCommandMockRecorder is the mock recorder for MockWriterCommand.
type MockWriterCommandMockRecorder struct {
	mock *MockWriterCommand
}

// NewMockWriterCommand creates a new mock instance.
func NewMockWriterCommand(ctrl *gomock.Controller) *MockWriterCommand {
	mock := &MockWriterCommand{ctrl: ctrl}
	mock.recorder = &MockWriterCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterCommand) EXPECT() *MockWriterCommandMockRecorder {
	return m.recorder
}

// ExecSq mocks base method.
func (m *MockWriterCommand) ExecSq(ctx context.Context, query squirrel.Sqlizer) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSq", ctx, query)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSq indicates an expected call of ExecSq.
func (mr *MockWriterCommandMockRecorder) ExecSq(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSq", reflect.TypeOf((*MockWriterCommand)(nil).ExecSq), ctx, query)
}

// MockReadQuery is a mock of ReadQuery interface.
type MockReadQuery struct {
	ctrl     *gomock.Controller
	recorder *MockReadQueryMockRecorder
}

// MockReadQueryMockRecorder is the mock recorder for MockReadQuery.
type MockReadQueryMockRecorder struct {
	mock *MockReadQuery
}

// NewMockReadQuery creates a new mock instance.
func NewMockReadQuery(ctrl *gomock.Controller) *MockReadQuery {
	mock := &MockReadQuery{ctrl: ctrl}
	mock.recorder = &MockReadQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadQuery) EXPECT() *MockReadQueryMockRecorder {
	return m.recorder
}

// QueryRowSq mocks base method.
func (m *MockReadQuery) QueryRowSq(ctx context.Context, query squirrel.Sqlizer, scanType QueryRowScanType, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRowSq", ctx, query, scanType, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRowSq indicates an expected call of QueryRowSq.
func (mr *MockReadQueryMockRecorder) QueryRowSq(ctx, query, scanType, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowSq", reflect.TypeOf((*MockReadQuery)(nil).QueryRowSq), ctx, query, scanType, dest)
}

// QuerySq mocks base method.
func (m *MockReadQuery) QuerySq(ctx context.Context, query squirrel.Sqlizer, callback callbackRows) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySq", ctx, query, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuerySq indicates an expected call of QuerySq.
func (mr *MockReadQueryMockRecorder) QuerySq(ctx, query, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySq", reflect.TypeOf((*MockReadQuery)(nil).QuerySq), ctx, query, callback)
}

// QuerySqPagination mocks base method.
func (m *MockReadQuery) QuerySqPagination(ctx context.Context, countQuery, query squirrel.SelectBuilder, pagination PaginationInput, callback callbackRows) (PaginationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySqPagination", ctx, countQuery, query, pagination, callback)
	ret0, _ := ret[0].(PaginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySqPagination indicates an expected call of QuerySqPagination.
func (mr *MockReadQueryMockRecorder) QuerySqPagination(ctx, countQuery, query, pagination, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySqPagination", reflect.TypeOf((*MockReadQuery)(nil).QuerySqPagination), ctx, countQuery, query, pagination, callback)
}

// MockqueryExecutor is a mock of queryExecutor interface.
type MockqueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockqueryExecutorMockRecorder
}

// MockqueryExecutorMockRecorder is the mock recorder for MockqueryExecutor.
type MockqueryExecutorMockRecorder struct {
	mock *MockqueryExecutor
}

// NewMockqueryExecutor creates a new mock instance.
func NewMockqueryExecutor(ctrl *gomock.Controller) *MockqueryExecutor {
	mock := &MockqueryExecutor{ctrl: ctrl}
	mock.recorder = &MockqueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockqueryExecutor) EXPECT() *MockqueryExecutorMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockqueryExecutor) ExecContext(ctx context.Context, query string, arg ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockqueryExecutorMockRecorder) ExecContext(ctx, query any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockqueryExecutor)(nil).ExecContext), varargs...)
}

// QueryRowxContext mocks base method.
func (m *MockqueryExecutor) QueryRowxContext(ctx context.Context, query string, args ...any) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockqueryExecutorMockRecorder) QueryRowxContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockqueryExecutor)(nil).QueryRowxContext), varargs...)
}

// QueryxContext mocks base method.
func (m *MockqueryExecutor) QueryxContext(ctx context.Context, query string, arg ...any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext.
func (mr *MockqueryExecutorMockRecorder) QueryxContext(ctx, query any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockqueryExecutor)(nil).QueryxContext), varargs...)
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// DoTx mocks base method.
func (m *MockTx) DoTx(ctx context.Context, opt *sql.TxOptions, fn func(Rdbms) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTx", ctx, opt, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoTx indicates an expected call of DoTx.
func (mr *MockTxMockRecorder) DoTx(ctx, opt, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTx", reflect.TypeOf((*MockTx)(nil).DoTx), ctx, opt, fn)
}

// DoTxContext mocks base method.
func (m *MockTx) DoTxContext(ctx context.Context, opt *sql.TxOptions, fn func(context.Context, Rdbms) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTxContext", ctx, opt, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoTxContext indicates an expected call of DoTxContext.
func (mr *MockTxMockRecorder) DoTxContext(ctx, opt, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTxContext", reflect.TypeOf((*MockTx)(nil).DoTxContext), ctx, opt, fn)
}
